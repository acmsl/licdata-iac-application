# vim: set fileencoding=utf-8
"""
org/acmsl/iac/licdata/application/licdata_iac_app.py

This script defines the LicdataIacApp class.

Copyright (C) 2024-today acmsl/licdata-iac-application

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import asyncio
from dbus_next import BusType
from org.acmsl.iac.licdata.domain import LicdataIac
from org.acmsl.iac.licdata.infrastructure.azure import PulumiAzureStackFactory
from org.acmsl.iac.licdata.infrastructure.cli import PulumiOptionsCli
from org.acmsl.iac.licdata.infrastructure.dbus import (
    LicdataIacDbusSignalEmitter,
    LicdataIacDbusSignalListener,
)
from pythoneda.shared.application import enable, PythonEDA
from pythoneda.shared.artifact.events.infrastructure.dbus import (
    DbusDockerImagePushed,
    DbusDockerImageRequested,
)
from pythoneda.shared.iac.events import (
    InfrastructureRemovalRequested,
    InfrastructureUpdateRequested,
)
from pythoneda.shared.iac.events.infrastructure.dbus import (
    DbusInfrastructureRemovalFailed,
    DbusInfrastructureRemovalRequested,
    DbusInfrastructureRemoved,
    DbusInfrastructureUpdated,
    DbusInfrastructureUpdateFailed,
    DbusInfrastructureUpdateRequested,
)
from pythoneda.shared.runtime.secrets.events.infrastructure.dbus import (
    DbusCredentialIssued,
)
from typing import Dict


# @enable(AzureServerlessLicense)
@enable(PulumiOptionsCli)
@enable(
    LicdataIacDbusSignalEmitter,
    events=[
        {"event-class": DbusCredentialIssued, "bus-type": BusType.SYSTEM},
        {"event-class": DbusDockerImageRequested, "bus-type": BusType.SYSTEM},
        {"event-class": DbusInfrastructureRemovalFailed, "bus-type": BusType.SYSTEM},
        {"event-class": DbusInfrastructureRemoved, "bus-type": BusType.SYSTEM},
        {"event-class": DbusInfrastructureUpdated, "bus-type": BusType.SYSTEM},
        {"event-class": DbusInfrastructureUpdateFailed, "bus-type": BusType.SYSTEM},
    ],
)
@enable(
    LicdataIacDbusSignalListener,
    events=[
        {"event-class": DbusDockerImagePushed, "bus-type": BusType.SYSTEM},
        {"event-class": DbusInfrastructureUpdateRequested, "bus-type": BusType.SYSTEM},
        {"event-class": DbusInfrastructureRemovalRequested, "bus-type": BusType.SYSTEM},
    ],
)
@enable(PulumiAzureStackFactory)
class LicdataIacApp(PythonEDA):
    """
    Licdata Infrastructure as Code Application.

    Class name: LicdataIacApp

    Responsibilities:
        - Define the Licdata Infrastructure as Code Application.

    Collaborators:
        - Pulumi
        - Azure infrastructure
    """

    def __init__(self):
        """
        Creates a new LicdataIacApp instance.
        """
        # licdata_iac_banner is automatically generated by the Nix flake.
        try:
            from org.acmsl.iac.licdata.application.licdata_iac_banner import (
                LicdataIacBanner,
            )

            banner = LicdataIacBanner()
        except ImportError:
            banner = None

        super().__init__(banner, __file__)

    async def accept_pulumi_options(self, options: Dict):
        """
        Annotates the Pulumi options.
        :param options: Such options.
        :type options: Dict
        :return: A list of events.
        :rtype: List[pythoneda.shared.Event]
        """
        operation = options.get("operation", "up")
        if operation == "up":
            events = await LicdataIac.listen_InfrastructureUpdateRequested(
                InfrastructureUpdateRequested(
                    options.get("stackName", None),
                    options.get("projectName", None),
                    options.get("location", None),
                )
            )
        else:
            events = await LicdataIac.listen_InfrastructureRemovalRequested(
                InfrastructureRemovalRequested(
                    options.get("stackName", None),
                    options.get("projectName", None),
                    options.get("location", None),
                )
            )

        for event in events:
            await self.emit(event)


if __name__ == "__main__":
    asyncio.run(LicdataIacApp.main("org.acmsl.iac.licdata.application.LicdataIacApp"))
# vim: syntax=python ts=4 sw=4 sts=4 tw=79 sr et
# Local Variables:
# mode: python
# python-indent-offset: 4
# tab-width: 4
# indent-tabs-mode: nil
# fill-column: 79
# End:
